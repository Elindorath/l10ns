/// <reference path='../Source/Types.ts'/>
var L10ns;
(function (L10ns) {
    var Tasks;
    (function (Tasks) {
        function generateDiagnostics(grunt) {
            const path = require('path');
            if (!/Bundle/.test(__filename)) {
                return;
            }
            grunt.registerTask('generate-diagnostics', () => {
                let result = '// <auto-generated />\r\n' +
                    '/// <reference path="Types.ts" />\r\n' +
                    '/* @internal */\r\n' +
                    'namespace L10ns {\r\n' +
                    '    export const Diagnostics = {\r\n';
                const diagnosticMessages = require(path.join(__dirname, '../../Source/DiagnosticMessages.json'));
                const names = Utilities.getObjectKeys(diagnosticMessages);
                const nameMap = buildUniqueNameMap(names);
                console.log(diagnosticMessages);
                for (const key in diagnosticMessages) {
                    var diagnosticDetails = diagnosticMessages[key];
                    var propName = convertPropertyName(nameMap[key]);
                    result +=
                        '        ' + propName +
                            ': { code: ' + diagnosticDetails.code +
                            ', category: DiagnosticCategory.' + diagnosticDetails.category +
                            ', key: "' + createKey(propName, diagnosticDetails.code) + '"' +
                            ', message: "' + key.replace(/[\"]/g, '\\"') + '"' +
                            ' },\r\n';
                }
                result += '    }\r\n}';
                console.log(result);
                L10ns.writeFile(L10ns.joinPath(__dirname, '../../Source/DiagnosticMessages.Generated.ts'), result);
            });
        }
        Tasks.generateDiagnostics = generateDiagnostics;
        function buildUniqueNameMap(names) {
            let nameMap = {};
            let uniqueNames = NameGenerator.ensureUniqueness(names, /* isCaseSensitive */ false, /* isFixed */ undefined);
            for (var i = 0; i < names.length; i++) {
                nameMap[names[i]] = uniqueNames[i];
            }
            return nameMap;
        }
        function createKey(name, code) {
            return name.slice(0, 100) + '_' + code;
        }
        function convertPropertyName(origName) {
            var result = origName.split("").map(char => {
                if (char === '*') {
                    return "_Asterisk";
                }
                if (char === '/') {
                    return "_Slash";
                }
                if (char === ':') {
                    return "_Colon";
                }
                return /\w/.test(char) ? char : "_";
            }).join("");
            // Get rid of all multi-underscores
            result = result.replace(/_+/g, "_");
            // Remove any leading underscore, unless it is followed by a number.
            result = result.replace(/^_([^\d])/, "$1");
            // Get rid of all trailing underscores.
            result = result.replace(/_$/, "");
            return result;
        }
    })(Tasks = L10ns.Tasks || (L10ns.Tasks = {}));
})(L10ns || (L10ns = {}));
var NameGenerator;
(function (NameGenerator) {
    function ensureUniqueness(names, isCaseSensitive, isFixed) {
        if (!isFixed) {
            isFixed = names.map(() => false);
        }
        var names = names.slice();
        ensureUniquenessInPlace(names, isCaseSensitive, isFixed);
        return names;
    }
    NameGenerator.ensureUniqueness = ensureUniqueness;
    function ensureUniquenessInPlace(names, isCaseSensitive, isFixed) {
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            var collisionIndices = Utilities.collectMatchingIndices(name, names, isCaseSensitive);
            // We will always have one "collision" because getCollisionIndices returns the index of name itself as well;
            // so if we only have one collision, then there are no issues.
            if (collisionIndices.length < 2) {
                continue;
            }
            handleCollisions(name, names, isFixed, collisionIndices, isCaseSensitive);
        }
    }
    function handleCollisions(name, proposedNames, isFixed, collisionIndices, isCaseSensitive) {
        var suffix = 1;
        for (var i = 0; i < collisionIndices.length; i++) {
            var collisionIndex = collisionIndices[i];
            if (isFixed[collisionIndex]) {
                // can't do anything about this name.
                continue;
            }
            while (true) {
                var newName = name + suffix;
                suffix++;
                // Check if we've synthesized a unique name, and if so
                // replace the conflicting name with the new one.
                if (!proposedNames.some(name => Utilities.stringEquals(name, newName, isCaseSensitive))) {
                    proposedNames[collisionIndex] = newName;
                    break;
                }
            }
        }
    }
})(NameGenerator || (NameGenerator = {}));
var Utilities;
(function (Utilities) {
    /// Return a list of all indices where a string occurs.
    function collectMatchingIndices(name, proposedNames, isCaseSensitive) {
        var matchingIndices = [];
        for (var i = 0; i < proposedNames.length; i++) {
            if (stringEquals(name, proposedNames[i], isCaseSensitive)) {
                matchingIndices.push(i);
            }
        }
        return matchingIndices;
    }
    Utilities.collectMatchingIndices = collectMatchingIndices;
    function stringEquals(s1, s2, caseSensitive) {
        if (caseSensitive) {
            s1 = s1.toLowerCase();
            s2 = s2.toLowerCase();
        }
        return s1 == s2;
    }
    Utilities.stringEquals = stringEquals;
    // Like Object.keys
    function getObjectKeys(obj) {
        var result = [];
        for (var name in obj) {
            if (obj.hasOwnProperty(name)) {
                result.push(name);
            }
        }
        return result;
    }
    Utilities.getObjectKeys = getObjectKeys;
})(Utilities || (Utilities = {}));
module.exports = L10ns.Tasks.generateDiagnostics;
//# sourceMappingURL=GenerateDiagnostics.js.mapvar L10ns;
(function (L10ns) {
    (function (DiagnosticCategory) {
        DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
        DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
        DiagnosticCategory[DiagnosticCategory["Message"] = 2] = "Message";
    })(L10ns.DiagnosticCategory || (L10ns.DiagnosticCategory = {}));
    var DiagnosticCategory = L10ns.DiagnosticCategory;
})(L10ns || (L10ns = {}));
/// <reference path='Types.ts'/>
var L10ns;
(function (L10ns) {
    function createCompilerDiagnostic(message) {
        var text = getLocaleSpecificMessage(message);
        if (arguments.length > 1) {
            text = formatStringFromArgs(text, arguments, 1);
        }
        return {
            file: undefined,
            start: undefined,
            length: undefined,
            messageText: text,
            category: message.category,
            code: message.code
        };
    }
    L10ns.createCompilerDiagnostic = createCompilerDiagnostic;
    function formatStringFromArgs(text, args, baseIndex) {
        baseIndex = baseIndex || 0;
        return text.replace(/{(\d+)}/g, function (_, index) { return args[+index + baseIndex]; });
    }
    L10ns.localizedDiagnosticMessages = undefined;
    function getLocaleSpecificMessage(message) {
        return L10ns.localizedDiagnosticMessages && L10ns.localizedDiagnosticMessages[message.key]
            ? L10ns.localizedDiagnosticMessages[message.key]
            : message.message;
    }
    L10ns.getLocaleSpecificMessage = getLocaleSpecificMessage;
    var Debug;
    (function (Debug) {
        var currentAssertionLevel = 0 /* None */;
        function shouldAssert(level) {
            return currentAssertionLevel >= level;
        }
        Debug.shouldAssert = shouldAssert;
        function assert(expression, message, verboseDebugInfo) {
            if (!expression) {
                var verboseDebugString = "";
                if (verboseDebugInfo) {
                    verboseDebugString = "\r\nVerbose Debug Information: " + verboseDebugInfo();
                }
                debugger;
                throw new Error("Debug Failure. False expression: " + (message || "") + verboseDebugString);
            }
        }
        Debug.assert = assert;
        function fail(message) {
            Debug.assert(/*expression*/ false, message);
        }
        Debug.fail = fail;
    })(Debug = L10ns.Debug || (L10ns.Debug = {}));
})(L10ns || (L10ns = {}));
/// <reference path='Types.ts'/>
var L10ns;
(function (L10ns) {
    var helpOption = {
        option: '--help',
        alias: '-h',
        description: 'Show help section. More details with `l10ns [action] --help`.'
    };
    var commandLineActions = [
        {
            action: 'sync',
            description: 'Sync localization keys with storage.',
            options: [
                helpOption,
                {
                    option: '--key',
                    alias: '-k',
                    hasValue: true
                },
                {
                    option: '--value',
                    alias: '-v',
                    hasValue: true
                },
                {
                    option: '--index',
                    alias: '-i',
                    hasValue: true
                },
                {
                    option: '--search-index',
                    alias: '-si',
                    hasValue: true
                }
            ]
        },
        {
            action: 'compile',
            description: 'Compile localizations.'
        }
    ];
    function isValidAction(action) {
        for (var _i = 0, commandLineActions_1 = commandLineActions; _i < commandLineActions_1.length; _i++) {
            var a = commandLineActions_1[_i];
            if (a.action === action) {
                return true;
            }
        }
        return false;
    }
    function getActionsOptions(action) {
        for (var _i = 0, commandLineActions_2 = commandLineActions; _i < commandLineActions_2.length; _i++) {
            var a = commandLineActions_2[_i];
            if (a.action === action) {
                return a.options;
            }
        }
        throw Error("Unknown action " + action);
    }
    function actionHasOption(action, option) {
        for (var _i = 0, commandLineActions_3 = commandLineActions; _i < commandLineActions_3.length; _i++) {
            var a = commandLineActions_3[_i];
            if (a.action === action) {
                if (!a.options) {
                    continue;
                }
                for (var _a = 0, _b = a.options; _a < _b.length; _a++) {
                    var o = _b[_a];
                    if (o.option === option) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    function parseCommandLine(args) {
        var errors = [];
        var fileNames = [];
        var action;
        var actionOptions = [];
        for (var i = 2; i < args.length; i++) {
            var arg = args[i];
            if (arg.startsWith('-')) {
                if (action) {
                    if (!actionHasOption(action, arg)) {
                        errors.push(L10ns.createCompilerDiagnostic(Diagnostics.The_action_0_must_be_the_second_command_line_argument, arg));
                        break;
                    }
                }
            }
            else {
                if (i !== 2) {
                    errors.push(L10ns.createCompilerDiagnostic(Diagnostics.The_action_0_must_be_the_second_command_line_argument, arg));
                    break;
                }
                if (isValidAction(arg)) {
                    action = arg;
                    actionOptions = getActionsOptions(arg);
                }
            }
        }
        return {
            fileNames: fileNames,
            errors: errors
        };
    }
    L10ns.parseCommandLine = parseCommandLine;
})(L10ns || (L10ns = {}));
/// <reference path='Types.ts'/>
var L10ns;
(function (L10ns) {
    var fs = require('fs');
    var _path = require('path');
    function writeFile(file, content) {
        fs.writeFileSync(file, content, { encoding: 'utf8' });
    }
    L10ns.writeFile = writeFile;
    function joinPath(path) {
        var paths = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            paths[_i - 1] = arguments[_i];
        }
        return _path.join.apply(_path, [path].concat(paths));
    }
    L10ns.joinPath = joinPath;
})(L10ns || (L10ns = {}));
