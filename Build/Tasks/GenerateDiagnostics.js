/// <reference path='../Source/Service/Types.ts'/>
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var L10ns;
(function (L10ns) {
    var Tasks;
    (function (Tasks) {
        function generateDiagnostics(grunt) {
            const path = require('path');
            if (!/Bundle/.test(__filename)) {
                return;
            }
            grunt.registerTask('generate-diagnostics', function () {
                return __awaiter(this, void 0, void 0, function* () {
                    const done = this.async();
                    let result = '// <auto-generated />\r\n' +
                        '/// <reference path="Types.ts" />\r\n' +
                        '/* @internal */\r\n' +
                        'namespace L10ns {\r\n' +
                        '    export const Diagnostics = {\r\n';
                    const diagnosticMessages = require(path.join(__dirname, '../../Source/Service/DiagnosticMessages.json'));
                    const names = Object.keys(diagnosticMessages);
                    const nameMap = buildUniqueNameMap(names);
                    for (const key in diagnosticMessages) {
                        var diagnosticDetails = diagnosticMessages[key];
                        var propName = convertPropertyName(nameMap[key]);
                        result +=
                            '        ' + propName +
                                ': { code: ' + diagnosticDetails.code +
                                ', category: DiagnosticCategory.' + diagnosticDetails.category +
                                ', key: "' + createKey(propName, diagnosticDetails.code) + '"' +
                                ', message: "' + key.replace(/[\"]/g, '\\"') + '"' +
                                ' },\r\n';
                    }
                    result += '    }\r\n}';
                    const generatedFile = L10ns.joinPath(__dirname, '../../Source/Service/DiagnosticMessages.Generated.ts');
                    yield L10ns.writeFile(generatedFile, result);
                    done();
                });
            });
        }
        Tasks.generateDiagnostics = generateDiagnostics;
        function buildUniqueNameMap(names) {
            let nameMap = {};
            let uniqueNames = NameGenerator.ensureUniqueness(names, /* isCaseSensitive */ false, /* isFixed */ undefined);
            for (var i = 0; i < names.length; i++) {
                nameMap[names[i]] = uniqueNames[i];
            }
            return nameMap;
        }
        function createKey(name, code) {
            return name.slice(0, 100) + '_' + code;
        }
        function convertPropertyName(origName) {
            var result = origName.split("").map(char => {
                if (char === '*') {
                    return "_Asterisk";
                }
                if (char === '/') {
                    return "_Slash";
                }
                if (char === ':') {
                    return "_Colon";
                }
                return /\w/.test(char) ? char : "_";
            }).join("");
            // Get rid of all multi-underscores
            result = result.replace(/_+/g, "_");
            // Remove any leading underscore, unless it is followed by a number.
            result = result.replace(/^_([^\d])/, "$1");
            // Get rid of all trailing underscores.
            result = result.replace(/_$/, "");
            return result;
        }
    })(Tasks = L10ns.Tasks || (L10ns.Tasks = {}));
})(L10ns || (L10ns = {}));
var NameGenerator;
(function (NameGenerator) {
    function ensureUniqueness(names, isCaseSensitive, isFixed) {
        if (!isFixed) {
            isFixed = names.map(() => false);
        }
        var names = names.slice();
        ensureUniquenessInPlace(names, isCaseSensitive, isFixed);
        return names;
    }
    NameGenerator.ensureUniqueness = ensureUniqueness;
    function ensureUniquenessInPlace(names, isCaseSensitive, isFixed) {
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            var collisionIndices = Utilities.collectMatchingIndices(name, names, isCaseSensitive);
            // We will always have one "collision" because getCollisionIndices returns the index of name itself as well;
            // so if we only have one collision, then there are no issues.
            if (collisionIndices.length < 2) {
                continue;
            }
            handleCollisions(name, names, isFixed, collisionIndices, isCaseSensitive);
        }
    }
    function handleCollisions(name, proposedNames, isFixed, collisionIndices, isCaseSensitive) {
        var suffix = 1;
        for (var i = 0; i < collisionIndices.length; i++) {
            var collisionIndex = collisionIndices[i];
            if (isFixed[collisionIndex]) {
                // can't do anything about this name.
                continue;
            }
            while (true) {
                var newName = name + suffix;
                suffix++;
                // Check if we've synthesized a unique name, and if so
                // replace the conflicting name with the new one.
                if (!proposedNames.some(name => Utilities.stringEquals(name, newName, isCaseSensitive))) {
                    proposedNames[collisionIndex] = newName;
                    break;
                }
            }
        }
    }
})(NameGenerator || (NameGenerator = {}));
var Utilities;
(function (Utilities) {
    /// Return a list of all indices where a string occurs.
    function collectMatchingIndices(name, proposedNames, isCaseSensitive) {
        var matchingIndices = [];
        for (var i = 0; i < proposedNames.length; i++) {
            if (stringEquals(name, proposedNames[i], isCaseSensitive)) {
                matchingIndices.push(i);
            }
        }
        return matchingIndices;
    }
    Utilities.collectMatchingIndices = collectMatchingIndices;
    function stringEquals(s1, s2, caseSensitive) {
        if (caseSensitive) {
            s1 = s1.toLowerCase();
            s2 = s2.toLowerCase();
        }
        return s1 == s2;
    }
    Utilities.stringEquals = stringEquals;
})(Utilities || (Utilities = {}));
module.exports = L10ns.Tasks.generateDiagnostics;
